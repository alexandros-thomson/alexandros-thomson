name: Summarize new issues

on:
  push:
    paths:
      - ".github/workflows/validate-install-from-source.yml"
      - "src/ipn-handler.ts"
      - "src/mappings/**"
      - "deno.json"
  issues:
    types: [opened]

jobs:
  summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Generate an AI summary. This step will call OpenAI if OPENAI_API_KEY is configured in repo/org secrets.
      # If no key is present it falls back to a simple heuristic summary so the workflow still runs.
      - name: Generate AI summary
        id: inference
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          set -euo pipefail

          # If OPENAI_API_KEY is provided, call OpenAI Chat Completions API (adjust model as needed).
          if [ -n "${OPENAI_API_KEY:-}" ]; then
            resp=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4o-mini",
                "messages": [
                  {
                    "role": "system",
                    "content": "You are an AI assistant that summarizes GitHub issues. Provide a concise, professional summary in 2-3 sentences."
                  },
                  {
                    "role": "user",
                    "content": "Please summarize this GitHub issue:\n\nTitle: '"$ISSUE_TITLE"'\n\nBody: '"$ISSUE_BODY"'"
                  }
                ],
                "max_tokens": 150,
                "temperature": 0.1
              }')
            
            # Extract the summary from the JSON response
            summary=$(echo "$resp" | jq -r '.choices[0].message.content // "Failed to generate AI summary"')
            echo "ðŸ¤– **AI Summary:**" > summary.txt
            echo "" >> summary.txt
            echo "$summary" >> summary.txt
            
          else
            # Fallback heuristic summary
            echo "ðŸ“‹ **Quick Summary:**" > summary.txt
            echo "" >> summary.txt
            echo "New issue opened: **${ISSUE_TITLE}**" >> summary.txt
            
            # Simple heuristic: count words in body
            if [ -n "${ISSUE_BODY:-}" ]; then
              word_count=$(echo "${ISSUE_BODY}" | wc -w)
              echo "" >> summary.txt
              echo "_Issue contains approximately ${word_count} words of description._" >> summary.txt
            else
              echo "" >> summary.txt
              echo "_No description provided._" >> summary.txt
            fi
            
            echo "" >> summary.txt
            echo "ðŸ’¡ _To enable AI summaries, configure the OPENAI_API_KEY secret._" >> summary.txt
          fi

          # Set output for next step
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post summary as comment
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${{ steps.inference.outputs.summary }}`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });