name: Summarize new issues

on:
  push:
    paths:
      - ".github/workflows/validate-install-from-source.yml"
      - "src/ipn-handler.ts"
      - "src/mappings/**"
      - "deno.json"
  issues:
    types: [opened]

jobs:
  summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Generate an AI summary. This step will call OpenAI if OPENAI_API_KEY is configured in repo/org secrets.
      # If no key is present it falls back to a simple heuristic summary so the workflow still runs.
      - name: Generate AI summary
        id: inference
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          set -euo pipefail

          # If OPENAI_API_KEY is provided, call OpenAI Chat Completions API (adjust model as needed).
          if [ -n "${OPENAI_API_KEY:-}" ]; then
            resp=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d @- <<'JSON'
{
  "model": "gpt-4o-mini",
  "messages": [
    {
      "role": "user",
      "content": "Summarize the following GitHub issue in one concise paragraph.\n\nTitle: ${ISSUE_TITLE}\n\nBody: ${ISSUE_BODY}"
    }
  ],
  "max_tokens": 300,
  "temperature": 0.2
}
JSON
            )
            # Extract content safely; requires jq (available on ubuntu-latest)
            summary=$(echo "$resp" | jq -r '.choices[0].message.content // empty' || echo "")
          else
            # Fallback: basic one-paragraph summary (title + first ~600 chars of body)
            BODY_SNIPPET=$(printf '%s' "${ISSUE_BODY:-}" | tr -d '\r' | cut -c1-600)
            if [ -z "${BODY_SNIPPET:-}" ]; then
              summary="Issue: ${ISSUE_TITLE}. No body provided."
            else
              if [ "${#ISSUE_BODY}" -gt 600 ]; then
                summary="Issue: ${ISSUE_TITLE}. ${BODY_SNIPPET}..."
              else
                summary="Issue: ${ISSUE_TITLE}. ${BODY_SNIPPET}"
              fi
            fi
          fi

          # Set the step output 'response' for later steps
          echo "response<<EOF" >> "$GITHUB_OUTPUT"
          echo "$summary" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Comment with AI summary
        uses: actions/github-script@v7
        env:
          INPUT_SUMMARY: ${{ steps.inference.outputs.response }}
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const body = process.env.INPUT_SUMMARY || "Summary generation failed or returned empty.";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });
