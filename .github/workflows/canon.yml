name: Basilica Canon Ritual
on:
  push:
    branches: [ "main" ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: your-dockerhub-username/basilica-core:latest, your-dockerhub-username/basilica-core:${{ github.sha }}
      - name: Trigger Netlify Deploy
        run: curl -X POST -d {} ${{ secrets.NETLIFY_BUILD_HOOK }}
      - name: Supabase Migration
        run: npx supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
      - name: Trigger Grafana Git Sync
        run: curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
          https://your-grafana-instance/api/admin/provisioning/git-sync
      - name: Verify Shrine Reachability
        run: |
          echo "Verifying Basilica shrine at https://kypriatechnologies.org..."
          HTTP_STATUS=$(curl -I -s -o /dev/null -w "%{http_code}" --max-time 30 https://kypriatechnologies.org)
          echo "HTTP Status Code: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "✅ Shrine is reachable and serving content (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ Shrine returned non-2xx status: HTTP $HTTP_STATUS"
            exit 1
          fi
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Run Trivy Scan - Core Reliquary
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: your-dockerhub-username/basilica-core:latest
          format: 'table'
          output: 'trivy-report-core.txt'
      - name: Upload Trivy Vulnerability Report - Core
        uses: actions/upload-artifact@v3
        with:
          name: 'Trivy Vulnerability Report - Core'
          path: trivy-report-core.txt
      - name: Run Trivy Scan - Worker Reliquary
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: your-dockerhub-username/basilica-worker:latest
          format: 'table'
          output: 'trivy-report-worker.txt'
      - name: Upload Trivy Vulnerability Report - Worker
        uses: actions/upload-artifact@v3
        with:
          name: 'Trivy Vulnerability Report - Worker'
          path: trivy-report-worker.txt
      - name: Run Trivy Scan - Observatory Reliquary
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: your-dockerhub-username/basilica-observatory:latest
          format: 'table'
          output: 'trivy-report-observatory.txt'
      - name: Upload Trivy Vulnerability Report - Observatory
        uses: actions/upload-artifact@v3
        with:
          name: 'Trivy Vulnerability Report - Observatory'
          path: trivy-report-observatory.txt
